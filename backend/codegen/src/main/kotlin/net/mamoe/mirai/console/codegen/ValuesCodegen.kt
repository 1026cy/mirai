/*
 * Copyright 2020 Mamoe Technologies and contributors.
 *
 * 此源代码的使用受 GNU AFFERO GENERAL PUBLIC LICENSE version 3 许可证的约束, 可以在以下链接找到该许可证.
 * Use of this source code is governed by the GNU AGPLv3 license that can be found through the following link.
 *
 * https://github.com/mamoe/mirai/blob/master/LICENSE
 */
@file:Suppress("ClassName")

package net.mamoe.mirai.console.codegen

import org.intellij.lang.annotations.Language
import java.io.File

fun main() {
    println(File("").absolutePath) // default project base dir

    File("backend/mirai-console/src/main/kotlin/net/mamoe/mirai/console/setting/_Value.kt").apply {
        createNewFile()
    }.writeText(genPublicApi())
}

internal const val COPYRIGHT = """
/*
 * Copyright 2020 Mamoe Technologies and contributors.
 *
 * 此源代码的使用受 GNU AFFERO GENERAL PUBLIC LICENSE version 3 许可证的约束, 可以在以下链接找到该许可证.
 * Use of this source code is governed by the GNU AGPLv3 license that can be found through the following link.
 *
 * https://github.com/mamoe/mirai/blob/master/LICENSE
 */
"""

internal val NUMBERS = listOf(
    "Int",
    "Short",
    "Byte",
    "Long",
    "Float",
    "Double"
)

internal val UNSIGNED_NUMBERS = listOf(
    "UInt",
    "UShort",
    "UByte",
    "ULong"
)

internal val OTHER_PRIMITIVES = listOf(
    "Boolean",
    "Char",
    "String"
)

fun genPublicApi() = buildString {
    fun appendln(@Language("kt") code: String){
        this.appendln(code.trimIndent())
    }
    
    appendln(COPYRIGHT.trim())
    appendln()
    appendln(
        """
            package net.mamoe.mirai.console.setting

            import kotlinx.serialization.KSerializer
            import kotlin.properties.ReadWriteProperty
            import kotlin.reflect.KProperty
        """
    )
    appendln()
    appendln(
        """
            /**
             * !!! These primitive types are auto-generated by backend/codegen/src/main/kotlin/net.mamoe.mirai.console.codegen.ValuesCodegen.kt 
             * !!! for better performance
             * !!! DO NOT MODIFY THIS FILE MANUALLY
             */
        """
    )
    appendln()

    appendln(
        """
sealed class Value<T : Any> : ReadWriteProperty<Setting, T> {
    abstract var value: T

    abstract val serializer: KSerializer<T>
    override fun getValue(thisRef: Setting, property: KProperty<*>): T = value
    override fun setValue(thisRef: Setting, property: KProperty<*>, value: T) {
        this.value = value
    }
}
        """
    )
    appendln()

    // PRIMITIVES

    appendln(
        """
            sealed class PrimitiveValue<T : Any> : Value<T>()

            sealed class NumberValue<T : Number> : Value<T>()
        """
    )

    for (number in NUMBERS) {
        val template = """
        abstract class ${number}Value internal constructor() : NumberValue<${number}>()
    """

        appendln(template)
    }

    appendln()

    for (number in OTHER_PRIMITIVES) {
        val template = """
        abstract class ${number}Value internal constructor() : PrimitiveValue<${number}>()
    """

        appendln(template)
    }

    appendln()

    // ARRAYS

    appendln(
        """
            // T can be primitive array or typed Array 
            sealed class ArrayValue<T : Any> : Value<T>()
    """
    )

    //   PRIMITIVE ARRAYS
    appendln(
        """
            sealed class PrimitiveArrayValue<T : Any> : ArrayValue<T>()
        """
    )
    appendln()

    for (number in (NUMBERS + OTHER_PRIMITIVES).filterNot { it == "String" }) {
        val template = """
            abstract class ${number}ArrayValue internal constructor() : PrimitiveArrayValue<${number}Array>(), Iterable<${number}> {
                override fun iterator(): Iterator<${number}> = this.value.iterator()
            }
    """

        appendln(template)
    }

    appendln()

    //   TYPED ARRAYS

    appendln(
        """
            sealed class TypedPrimitiveArrayValue<E> : ArrayValue<Array<E>>() , Iterable<E>{
                override fun iterator() = this.value.iterator()
            }
    """
    )
    appendln()

    for (number in (NUMBERS + OTHER_PRIMITIVES)) {
        val template = """
            abstract class Typed${number}ArrayValue internal constructor() : TypedPrimitiveArrayValue<${number}>()
    """

        appendln(template)
    }

    appendln()

    //   TYPED LISTS

    appendln(
        """
            sealed class ListValue<E> : Value<List<E>>(), Iterable<E>{
                override fun iterator() = this.value.iterator()
            }
    """
    )

    for (number in (NUMBERS + OTHER_PRIMITIVES)) {
        val template = """
            abstract class ${number}ListValue internal constructor() : ListValue<${number}>()
    """

        appendln(template)
    }

    appendln()
}