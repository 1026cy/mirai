/*
 * Copyright 2020 Mamoe Technologies and contributors.
 *
 * 此源代码的使用受 GNU AFFERO GENERAL PUBLIC LICENSE version 3 许可证的约束, 可以在以下链接找到该许可证.
 * Use of this source code is governed by the GNU AGPLv3 license that can be found through the following link.
 *
 * https://github.com/mamoe/mirai/blob/master/LICENSE
 */

package net.mamoe.mirai.console.setting

import kotlinx.serialization.Decoder
import kotlinx.serialization.Encoder
import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialDescriptor
import kotlin.properties.ReadWriteProperty
import kotlin.reflect.KProperty

/**
 * !!! These primitive types are auto-generated by backend/codegen/src/main/kotlin/net.mamoe.mirai.console.ValuesCodegen.kt
 * !!! for better performance
 * !!! DO NOT MODIFY THIS FILE MANUALLY
 */

sealed class Value<T : Any> : ReadWriteProperty<Setting, T> {
    abstract var value: T

    abstract val serializer: KSerializer<T>
    override fun getValue(thisRef: Setting, property: KProperty<*>): T = value
    override fun setValue(thisRef: Setting, property: KProperty<*>, value: T) {
        this.value = value
    }
}

sealed class PrimitiveValue<T : Any> : Value<T>()

sealed class NumberValue<T : Number> : Value<T>()
abstract class IntValue internal constructor() : NumberValue<Int>()
abstract class ShortValue internal constructor() : NumberValue<Short>()
abstract class ByteValue internal constructor() : NumberValue<Byte>()
abstract class LongValue internal constructor() : NumberValue<Long>()
abstract class FloatValue internal constructor() : NumberValue<Float>()
abstract class DoubleValue internal constructor() : NumberValue<Double>()

abstract class BooleanValue internal constructor() : PrimitiveValue<Boolean>()
abstract class CharValue internal constructor() : PrimitiveValue<Char>()
abstract class StringValue internal constructor() : PrimitiveValue<String>()

// T can be primitive array or typed Array 
sealed class ArrayValue<T : Any> : Value<T>()
sealed class PrimitiveArrayValue<T : Any> : ArrayValue<T>()

abstract class IntArrayValue internal constructor() : PrimitiveArrayValue<IntArray>(), Iterable<Int> {
    override fun iterator(): Iterator<Int> = this.value.iterator()
}
abstract class ShortArrayValue internal constructor() : PrimitiveArrayValue<ShortArray>(), Iterable<Short> {
    override fun iterator(): Iterator<Short> = this.value.iterator()
}
abstract class ByteArrayValue internal constructor() : PrimitiveArrayValue<ByteArray>(), Iterable<Byte> {
    override fun iterator(): Iterator<Byte> = this.value.iterator()
}
abstract class LongArrayValue internal constructor() : PrimitiveArrayValue<LongArray>(), Iterable<Long> {
    override fun iterator(): Iterator<Long> = this.value.iterator()
}
abstract class FloatArrayValue internal constructor() : PrimitiveArrayValue<FloatArray>(), Iterable<Float> {
    override fun iterator(): Iterator<Float> = this.value.iterator()
}
abstract class DoubleArrayValue internal constructor() : PrimitiveArrayValue<DoubleArray>(), Iterable<Double> {
    override fun iterator(): Iterator<Double> = this.value.iterator()
}
abstract class BooleanArrayValue internal constructor() : PrimitiveArrayValue<BooleanArray>(), Iterable<Boolean> {
    override fun iterator(): Iterator<Boolean> = this.value.iterator()
}
abstract class CharArrayValue internal constructor() : PrimitiveArrayValue<CharArray>(), Iterable<Char> {
    override fun iterator(): Iterator<Char> = this.value.iterator()
}

sealed class TypedPrimitiveArrayValue<E> : ArrayValue<Array<E>>() , Iterable<E>{
    override fun iterator() = this.value.iterator()
}

abstract class TypedIntArrayValue internal constructor() : TypedPrimitiveArrayValue<Int>()
abstract class TypedShortArrayValue internal constructor() : TypedPrimitiveArrayValue<Short>()
abstract class TypedByteArrayValue internal constructor() : TypedPrimitiveArrayValue<Byte>()
abstract class TypedLongArrayValue internal constructor() : TypedPrimitiveArrayValue<Long>()
abstract class TypedFloatArrayValue internal constructor() : TypedPrimitiveArrayValue<Float>()
abstract class TypedDoubleArrayValue internal constructor() : TypedPrimitiveArrayValue<Double>()
abstract class TypedBooleanArrayValue internal constructor() : TypedPrimitiveArrayValue<Boolean>()
abstract class TypedCharArrayValue internal constructor() : TypedPrimitiveArrayValue<Char>()
abstract class TypedStringArrayValue internal constructor() : TypedPrimitiveArrayValue<String>()

sealed class ListValue<E> : Value<List<E>>(), Iterable<E>{
    override fun iterator() = this.value.iterator()
}

abstract class IntListValue internal constructor() : ListValue<Int>()
abstract class ShortListValue internal constructor() : ListValue<Short>()
abstract class ByteListValue internal constructor() : ListValue<Byte>()
abstract class LongListValue internal constructor() : ListValue<Long>()
abstract class FloatListValue internal constructor() : ListValue<Float>()
abstract class DoubleListValue internal constructor() : ListValue<Double>()
abstract class BooleanListValue internal constructor() : ListValue<Boolean>()
abstract class CharListValue internal constructor() : ListValue<Char>()
abstract class StringListValue internal constructor() : ListValue<String>()

abstract class SettingValue<T : Setting> internal constructor() : Value<T>()

internal fun <T : Setting> Setting.valueImpl(default: T): Value<T> {
    return object : SettingValue<T>() {
        private var internalValue: T = default
        override var value: T
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = object : KSerializer<T> {
            override val descriptor: SerialDescriptor
                get() = internalValue.updaterSerializer.descriptor

            override fun deserialize(decoder: Decoder): T {
                internalValue.updaterSerializer.deserialize(decoder)
                return internalValue
            }

            override fun serialize(encoder: Encoder, value: T) {
                internalValue.updaterSerializer.serialize(encoder, SettingSerializerMark)
            }

        }.bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}