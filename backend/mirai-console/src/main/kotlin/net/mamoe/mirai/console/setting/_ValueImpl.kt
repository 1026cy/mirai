/*
 * Copyright 2020 Mamoe Technologies and contributors.
 *
 * 此源代码的使用受 GNU AFFERO GENERAL PUBLIC LICENSE version 3 许可证的约束, 可以在以下链接找到该许可证.
 * Use of this source code is governed by the GNU AGPLv3 license that can be found through the following link.
 *
 * https://github.com/mamoe/mirai/blob/master/LICENSE
 */


package net.mamoe.mirai.console.setting

import kotlinx.serialization.builtins.*


/**
 * !!! This file is auto-generated by test/kotlin/net.mamoe.mirai.console.SettingsCodegen.kt
 * !!! DO NOT MODIFY THIS FILE MANUALLY
 */


internal fun Setting.valueImpl(default: Int): IntValue {
    return object : IntValue() {
        private var internalValue: Int = default
        override var value: Int
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Int.serializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Short): ShortValue {
    return object : ShortValue() {
        private var internalValue: Short = default
        override var value: Short
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Short.serializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Byte): ByteValue {
    return object : ByteValue() {
        private var internalValue: Byte = default
        override var value: Byte
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Byte.serializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Long): LongValue {
    return object : LongValue() {
        private var internalValue: Long = default
        override var value: Long
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Long.serializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Float): FloatValue {
    return object : FloatValue() {
        private var internalValue: Float = default
        override var value: Float
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Float.serializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Double): DoubleValue {
    return object : DoubleValue() {
        private var internalValue: Double = default
        override var value: Double
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Double.serializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Boolean): BooleanValue {
    return object : BooleanValue() {
        private var internalValue: Boolean = default
        override var value: Boolean
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Boolean.serializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Char): CharValue {
    return object : CharValue() {
        private var internalValue: Char = default
        override var value: Char
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Char.serializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: String): StringValue {
    return object : StringValue() {
        private var internalValue: String = default
        override var value: String
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = String.serializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: IntArray): IntArrayValue {
    return object : IntArrayValue() {
        private var internalValue: IntArray = default
        override var value: IntArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = IntArraySerializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: ShortArray): ShortArrayValue {
    return object : ShortArrayValue() {
        private var internalValue: ShortArray = default
        override var value: ShortArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ShortArraySerializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: ByteArray): ByteArrayValue {
    return object : ByteArrayValue() {
        private var internalValue: ByteArray = default
        override var value: ByteArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ByteArraySerializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: LongArray): LongArrayValue {
    return object : LongArrayValue() {
        private var internalValue: LongArray = default
        override var value: LongArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = LongArraySerializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: FloatArray): FloatArrayValue {
    return object : FloatArrayValue() {
        private var internalValue: FloatArray = default
        override var value: FloatArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = FloatArraySerializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: DoubleArray): DoubleArrayValue {
    return object : DoubleArrayValue() {
        private var internalValue: DoubleArray = default
        override var value: DoubleArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = DoubleArraySerializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: BooleanArray): BooleanArrayValue {
    return object : BooleanArrayValue() {
        private var internalValue: BooleanArray = default
        override var value: BooleanArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = BooleanArraySerializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: CharArray): CharArrayValue {
    return object : CharArrayValue() {
        private var internalValue: CharArray = default
        override var value: CharArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = CharArraySerializer().bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Array<Int>): TypedIntArrayValue {
    return object : TypedIntArrayValue() {
        private var internalValue: Array<Int> = default
        override var value: Array<Int>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Int.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Array<Short>): TypedShortArrayValue {
    return object : TypedShortArrayValue() {
        private var internalValue: Array<Short> = default
        override var value: Array<Short>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Short.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Array<Byte>): TypedByteArrayValue {
    return object : TypedByteArrayValue() {
        private var internalValue: Array<Byte> = default
        override var value: Array<Byte>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Byte.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Array<Long>): TypedLongArrayValue {
    return object : TypedLongArrayValue() {
        private var internalValue: Array<Long> = default
        override var value: Array<Long>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Long.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Array<Float>): TypedFloatArrayValue {
    return object : TypedFloatArrayValue() {
        private var internalValue: Array<Float> = default
        override var value: Array<Float>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Float.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Array<Double>): TypedDoubleArrayValue {
    return object : TypedDoubleArrayValue() {
        private var internalValue: Array<Double> = default
        override var value: Array<Double>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Double.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Array<Boolean>): TypedBooleanArrayValue {
    return object : TypedBooleanArrayValue() {
        private var internalValue: Array<Boolean> = default
        override var value: Array<Boolean>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Boolean.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Array<Char>): TypedCharArrayValue {
    return object : TypedCharArrayValue() {
        private var internalValue: Array<Char> = default
        override var value: Array<Char>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Char.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: Array<String>): TypedStringArrayValue {
    return object : TypedStringArrayValue() {
        private var internalValue: Array<String> = default
        override var value: Array<String>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(String.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: List<Int>): IntListValue {
    return object : IntListValue() {
        private var internalValue: List<Int> = default
        override var value: List<Int>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Int.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: List<Short>): ShortListValue {
    return object : ShortListValue() {
        private var internalValue: List<Short> = default
        override var value: List<Short>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Short.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: List<Byte>): ByteListValue {
    return object : ByteListValue() {
        private var internalValue: List<Byte> = default
        override var value: List<Byte>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Byte.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: List<Long>): LongListValue {
    return object : LongListValue() {
        private var internalValue: List<Long> = default
        override var value: List<Long>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Long.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: List<Float>): FloatListValue {
    return object : FloatListValue() {
        private var internalValue: List<Float> = default
        override var value: List<Float>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Float.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: List<Double>): DoubleListValue {
    return object : DoubleListValue() {
        private var internalValue: List<Double> = default
        override var value: List<Double>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Double.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: List<Boolean>): BooleanListValue {
    return object : BooleanListValue() {
        private var internalValue: List<Boolean> = default
        override var value: List<Boolean>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Boolean.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: List<Char>): CharListValue {
    return object : CharListValue() {
        private var internalValue: List<Char> = default
        override var value: List<Char>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Char.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}

internal fun Setting.valueImpl(default: List<String>): StringListValue {
    return object : StringListValue() {
        private var internalValue: List<String> = default
        override var value: List<String>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(String.serializer()).bind(
            getter = { internalValue },
            setter = { internalValue = it }
        )
    }
}


