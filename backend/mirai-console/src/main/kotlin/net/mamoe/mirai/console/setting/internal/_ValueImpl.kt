/*
 * Copyright 2020 Mamoe Technologies and contributors.
 *
 * 此源代码的使用受 GNU AFFERO GENERAL PUBLIC LICENSE version 3 许可证的约束, 可以在以下链接找到该许可证.
 * Use of this source code is governed by the GNU AGPLv3 license that can be found through the following link.
 *
 * https://github.com/mamoe/mirai/blob/master/LICENSE
 */

package net.mamoe.mirai.console.setting.internal

import kotlinx.serialization.Decoder
import kotlinx.serialization.Encoder
import kotlinx.serialization.KSerializer
import kotlinx.serialization.SerialDescriptor
import kotlinx.serialization.builtins.*
import net.mamoe.mirai.console.setting.*


/**
 * !!! This file is auto-generated by backend/codegen/src/kotlin/net.mamoe.mirai.console.codegen.ValueImplCodegen.kt
 * !!! DO NOT MODIFY THIS FILE MANUALLY
 */


internal fun Setting.valueImpl(default: Int): IntValue {
    return object : IntValue() {
        private var internalValue: Int = default
        override var value: Int
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Int.serializer()
    }
}

internal fun Setting.valueImpl(default: Short): ShortValue {
    return object : ShortValue() {
        private var internalValue: Short = default
        override var value: Short
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Short.serializer()
    }
}

internal fun Setting.valueImpl(default: Byte): ByteValue {
    return object : ByteValue() {
        private var internalValue: Byte = default
        override var value: Byte
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Byte.serializer()
    }
}

internal fun Setting.valueImpl(default: Long): LongValue {
    return object : LongValue() {
        private var internalValue: Long = default
        override var value: Long
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Long.serializer()
    }
}

internal fun Setting.valueImpl(default: Float): FloatValue {
    return object : FloatValue() {
        private var internalValue: Float = default
        override var value: Float
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Float.serializer()
    }
}

internal fun Setting.valueImpl(default: Double): DoubleValue {
    return object : DoubleValue() {
        private var internalValue: Double = default
        override var value: Double
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Double.serializer()
    }
}

internal fun Setting.valueImpl(default: Boolean): BooleanValue {
    return object : BooleanValue() {
        private var internalValue: Boolean = default
        override var value: Boolean
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Boolean.serializer()
    }
}

internal fun Setting.valueImpl(default: Char): CharValue {
    return object : CharValue() {
        private var internalValue: Char = default
        override var value: Char
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = Char.serializer()
    }
}

internal fun Setting.valueImpl(default: String): StringValue {
    return object : StringValue() {
        private var internalValue: String = default
        override var value: String
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = String.serializer()
    }
}

internal fun Setting.valueImpl(default: IntArray): IntArrayValue {
    return object : IntArrayValue() {
        private var internalValue: IntArray = default
        override var value: IntArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = IntArraySerializer()
    }
}

internal fun Setting.valueImpl(default: ShortArray): ShortArrayValue {
    return object : ShortArrayValue() {
        private var internalValue: ShortArray = default
        override var value: ShortArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ShortArraySerializer()
    }
}

internal fun Setting.valueImpl(default: ByteArray): ByteArrayValue {
    return object : ByteArrayValue() {
        private var internalValue: ByteArray = default
        override var value: ByteArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ByteArraySerializer()
    }
}

internal fun Setting.valueImpl(default: LongArray): LongArrayValue {
    return object : LongArrayValue() {
        private var internalValue: LongArray = default
        override var value: LongArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = LongArraySerializer()
    }
}

internal fun Setting.valueImpl(default: FloatArray): FloatArrayValue {
    return object : FloatArrayValue() {
        private var internalValue: FloatArray = default
        override var value: FloatArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = FloatArraySerializer()
    }
}

internal fun Setting.valueImpl(default: DoubleArray): DoubleArrayValue {
    return object : DoubleArrayValue() {
        private var internalValue: DoubleArray = default
        override var value: DoubleArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = DoubleArraySerializer()
    }
}

internal fun Setting.valueImpl(default: BooleanArray): BooleanArrayValue {
    return object : BooleanArrayValue() {
        private var internalValue: BooleanArray = default
        override var value: BooleanArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = BooleanArraySerializer()
    }
}

internal fun Setting.valueImpl(default: CharArray): CharArrayValue {
    return object : CharArrayValue() {
        private var internalValue: CharArray = default
        override var value: CharArray
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = CharArraySerializer()
    }
}

internal fun Setting.valueImpl(default: Array<Int>): TypedIntArrayValue {
    return object : TypedIntArrayValue() {
        private var internalValue: Array<Int> = default
        override var value: Array<Int>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Int.serializer())
    }
}

internal fun Setting.valueImpl(default: Array<Short>): TypedShortArrayValue {
    return object : TypedShortArrayValue() {
        private var internalValue: Array<Short> = default
        override var value: Array<Short>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Short.serializer())
    }
}

internal fun Setting.valueImpl(default: Array<Byte>): TypedByteArrayValue {
    return object : TypedByteArrayValue() {
        private var internalValue: Array<Byte> = default
        override var value: Array<Byte>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Byte.serializer())
    }
}

internal fun Setting.valueImpl(default: Array<Long>): TypedLongArrayValue {
    return object : TypedLongArrayValue() {
        private var internalValue: Array<Long> = default
        override var value: Array<Long>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Long.serializer())
    }
}

internal fun Setting.valueImpl(default: Array<Float>): TypedFloatArrayValue {
    return object : TypedFloatArrayValue() {
        private var internalValue: Array<Float> = default
        override var value: Array<Float>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Float.serializer())
    }
}

internal fun Setting.valueImpl(default: Array<Double>): TypedDoubleArrayValue {
    return object : TypedDoubleArrayValue() {
        private var internalValue: Array<Double> = default
        override var value: Array<Double>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Double.serializer())
    }
}

internal fun Setting.valueImpl(default: Array<Boolean>): TypedBooleanArrayValue {
    return object : TypedBooleanArrayValue() {
        private var internalValue: Array<Boolean> = default
        override var value: Array<Boolean>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Boolean.serializer())
    }
}

internal fun Setting.valueImpl(default: Array<Char>): TypedCharArrayValue {
    return object : TypedCharArrayValue() {
        private var internalValue: Array<Char> = default
        override var value: Array<Char>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(Char.serializer())
    }
}

internal fun Setting.valueImpl(default: Array<String>): TypedStringArrayValue {
    return object : TypedStringArrayValue() {
        private var internalValue: Array<String> = default
        override var value: Array<String>
            get() = internalValue
            set(new) {
                if (!new.contentEquals(internalValue)) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ArraySerializer(String.serializer())
    }
}

internal fun Setting.valueImpl(default: List<Int>): IntListValue {
    var internalValue: List<Int> = default
    return object : IntListValue(), List<Int> by dynamicList({ internalValue }) {
        override var value: List<Int>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Int.serializer())
    }
}

internal fun Setting.valueImpl(default: List<Short>): ShortListValue {
    var internalValue: List<Short> = default
    return object : ShortListValue(), List<Short> by dynamicList({ internalValue }) {
        override var value: List<Short>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Short.serializer())
    }
}

internal fun Setting.valueImpl(default: List<Byte>): ByteListValue {
    var internalValue: List<Byte> = default
    return object : ByteListValue(), List<Byte> by dynamicList({ internalValue }) {
        override var value: List<Byte>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Byte.serializer())
    }
}

internal fun Setting.valueImpl(default: List<Long>): LongListValue {
    var internalValue: List<Long> = default
    return object : LongListValue(), List<Long> by dynamicList({ internalValue }) {
        override var value: List<Long>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Long.serializer())
    }
}

internal fun Setting.valueImpl(default: List<Float>): FloatListValue {
    var internalValue: List<Float> = default
    return object : FloatListValue(), List<Float> by dynamicList({ internalValue }) {
        override var value: List<Float>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Float.serializer())
    }
}

internal fun Setting.valueImpl(default: List<Double>): DoubleListValue {
    var internalValue: List<Double> = default
    return object : DoubleListValue(), List<Double> by dynamicList({ internalValue }) {
        override var value: List<Double>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Double.serializer())
    }
}

internal fun Setting.valueImpl(default: List<Boolean>): BooleanListValue {
    var internalValue: List<Boolean> = default
    return object : BooleanListValue(), List<Boolean> by dynamicList({ internalValue }) {
        override var value: List<Boolean>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Boolean.serializer())
    }
}

internal fun Setting.valueImpl(default: List<Char>): CharListValue {
    var internalValue: List<Char> = default
    return object : CharListValue(), List<Char> by dynamicList({ internalValue }) {
        override var value: List<Char>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(Char.serializer())
    }
}

internal fun Setting.valueImpl(default: List<String>): StringListValue {
    var internalValue: List<String> = default
    return object : StringListValue(), List<String> by dynamicList({ internalValue }) {
        override var value: List<String>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = ListSerializer(String.serializer())
    }
}

internal fun Setting.valueImpl(default: Set<Int>): IntSetValue {
    var internalValue: Set<Int> = default
    return object : IntSetValue(), Set<Int> by dynamicSet({ internalValue }) {
        override var value: Set<Int>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = SetSerializer(Int.serializer())
    }
}

internal fun Setting.valueImpl(default: Set<Short>): ShortSetValue {
    var internalValue: Set<Short> = default
    return object : ShortSetValue(), Set<Short> by dynamicSet({ internalValue }) {
        override var value: Set<Short>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = SetSerializer(Short.serializer())
    }
}

internal fun Setting.valueImpl(default: Set<Byte>): ByteSetValue {
    var internalValue: Set<Byte> = default
    return object : ByteSetValue(), Set<Byte> by dynamicSet({ internalValue }) {
        override var value: Set<Byte>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = SetSerializer(Byte.serializer())
    }
}

internal fun Setting.valueImpl(default: Set<Long>): LongSetValue {
    var internalValue: Set<Long> = default
    return object : LongSetValue(), Set<Long> by dynamicSet({ internalValue }) {
        override var value: Set<Long>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = SetSerializer(Long.serializer())
    }
}

internal fun Setting.valueImpl(default: Set<Float>): FloatSetValue {
    var internalValue: Set<Float> = default
    return object : FloatSetValue(), Set<Float> by dynamicSet({ internalValue }) {
        override var value: Set<Float>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = SetSerializer(Float.serializer())
    }
}

internal fun Setting.valueImpl(default: Set<Double>): DoubleSetValue {
    var internalValue: Set<Double> = default
    return object : DoubleSetValue(), Set<Double> by dynamicSet({ internalValue }) {
        override var value: Set<Double>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = SetSerializer(Double.serializer())
    }
}

internal fun Setting.valueImpl(default: Set<Boolean>): BooleanSetValue {
    var internalValue: Set<Boolean> = default
    return object : BooleanSetValue(), Set<Boolean> by dynamicSet({ internalValue }) {
        override var value: Set<Boolean>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = SetSerializer(Boolean.serializer())
    }
}

internal fun Setting.valueImpl(default: Set<Char>): CharSetValue {
    var internalValue: Set<Char> = default
    return object : CharSetValue(), Set<Char> by dynamicSet({ internalValue }) {
        override var value: Set<Char>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = SetSerializer(Char.serializer())
    }
}

internal fun Setting.valueImpl(default: Set<String>): StringSetValue {
    var internalValue: Set<String> = default
    return object : StringSetValue(), Set<String> by dynamicSet({ internalValue }) {
        override var value: Set<String>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = SetSerializer(String.serializer())
    }
}


@JvmName("valueImplMutableIntList")
internal fun Setting.valueImpl(
    default: MutableList<Int>
): MutableIntListValue {
    var internalValue: MutableList<Int> = default

    val delegt = dynamicMutableList { internalValue }
    return object : MutableIntListValue(), MutableList<Int> by delegt {
        override var value: MutableList<Int>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableList<Int>> = object : KSerializer<MutableList<Int>> {
            private val delegate = ListSerializer(Int.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableList<Int> {
                return delegate.deserialize(decoder).toMutableList().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableList<Int>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableShortList")
internal fun Setting.valueImpl(
    default: MutableList<Short>
): MutableShortListValue {
    var internalValue: MutableList<Short> = default

    val delegt = dynamicMutableList { internalValue }
    return object : MutableShortListValue(), MutableList<Short> by delegt {
        override var value: MutableList<Short>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableList<Short>> = object : KSerializer<MutableList<Short>> {
            private val delegate = ListSerializer(Short.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableList<Short> {
                return delegate.deserialize(decoder).toMutableList().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableList<Short>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableByteList")
internal fun Setting.valueImpl(
    default: MutableList<Byte>
): MutableByteListValue {
    var internalValue: MutableList<Byte> = default

    val delegt = dynamicMutableList { internalValue }
    return object : MutableByteListValue(), MutableList<Byte> by delegt {
        override var value: MutableList<Byte>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableList<Byte>> = object : KSerializer<MutableList<Byte>> {
            private val delegate = ListSerializer(Byte.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableList<Byte> {
                return delegate.deserialize(decoder).toMutableList().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableList<Byte>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableLongList")
internal fun Setting.valueImpl(
    default: MutableList<Long>
): MutableLongListValue {
    var internalValue: MutableList<Long> = default

    val delegt = dynamicMutableList { internalValue }
    return object : MutableLongListValue(), MutableList<Long> by delegt {
        override var value: MutableList<Long>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableList<Long>> = object : KSerializer<MutableList<Long>> {
            private val delegate = ListSerializer(Long.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableList<Long> {
                return delegate.deserialize(decoder).toMutableList().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableList<Long>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableFloatList")
internal fun Setting.valueImpl(
    default: MutableList<Float>
): MutableFloatListValue {
    var internalValue: MutableList<Float> = default

    val delegt = dynamicMutableList { internalValue }
    return object : MutableFloatListValue(), MutableList<Float> by delegt {
        override var value: MutableList<Float>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableList<Float>> = object : KSerializer<MutableList<Float>> {
            private val delegate = ListSerializer(Float.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableList<Float> {
                return delegate.deserialize(decoder).toMutableList().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableList<Float>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableDoubleList")
internal fun Setting.valueImpl(
    default: MutableList<Double>
): MutableDoubleListValue {
    var internalValue: MutableList<Double> = default

    val delegt = dynamicMutableList { internalValue }
    return object : MutableDoubleListValue(), MutableList<Double> by delegt {
        override var value: MutableList<Double>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableList<Double>> = object : KSerializer<MutableList<Double>> {
            private val delegate = ListSerializer(Double.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableList<Double> {
                return delegate.deserialize(decoder).toMutableList().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableList<Double>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableBooleanList")
internal fun Setting.valueImpl(
    default: MutableList<Boolean>
): MutableBooleanListValue {
    var internalValue: MutableList<Boolean> = default

    val delegt = dynamicMutableList { internalValue }
    return object : MutableBooleanListValue(), MutableList<Boolean> by delegt {
        override var value: MutableList<Boolean>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableList<Boolean>> = object : KSerializer<MutableList<Boolean>> {
            private val delegate = ListSerializer(Boolean.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableList<Boolean> {
                return delegate.deserialize(decoder).toMutableList().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableList<Boolean>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableCharList")
internal fun Setting.valueImpl(
    default: MutableList<Char>
): MutableCharListValue {
    var internalValue: MutableList<Char> = default

    val delegt = dynamicMutableList { internalValue }
    return object : MutableCharListValue(), MutableList<Char> by delegt {
        override var value: MutableList<Char>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableList<Char>> = object : KSerializer<MutableList<Char>> {
            private val delegate = ListSerializer(Char.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableList<Char> {
                return delegate.deserialize(decoder).toMutableList().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableList<Char>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableStringList")
internal fun Setting.valueImpl(
    default: MutableList<String>
): MutableStringListValue {
    var internalValue: MutableList<String> = default

    val delegt = dynamicMutableList { internalValue }
    return object : MutableStringListValue(), MutableList<String> by delegt {
        override var value: MutableList<String>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableList<String>> = object : KSerializer<MutableList<String>> {
            private val delegate = ListSerializer(String.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableList<String> {
                return delegate.deserialize(decoder).toMutableList().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableList<String>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableIntSet")
internal fun Setting.valueImpl(
    default: MutableSet<Int>
): MutableIntSetValue {
    var internalValue: MutableSet<Int> = default

    val delegt = dynamicMutableSet { internalValue }
    return object : MutableIntSetValue(), MutableSet<Int> by delegt {
        override var value: MutableSet<Int>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableSet<Int>> = object : KSerializer<MutableSet<Int>> {
            private val delegate = SetSerializer(Int.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableSet<Int> {
                return delegate.deserialize(decoder).toMutableSet().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableSet<Int>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableShortSet")
internal fun Setting.valueImpl(
    default: MutableSet<Short>
): MutableShortSetValue {
    var internalValue: MutableSet<Short> = default

    val delegt = dynamicMutableSet { internalValue }
    return object : MutableShortSetValue(), MutableSet<Short> by delegt {
        override var value: MutableSet<Short>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableSet<Short>> = object : KSerializer<MutableSet<Short>> {
            private val delegate = SetSerializer(Short.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableSet<Short> {
                return delegate.deserialize(decoder).toMutableSet().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableSet<Short>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableByteSet")
internal fun Setting.valueImpl(
    default: MutableSet<Byte>
): MutableByteSetValue {
    var internalValue: MutableSet<Byte> = default

    val delegt = dynamicMutableSet { internalValue }
    return object : MutableByteSetValue(), MutableSet<Byte> by delegt {
        override var value: MutableSet<Byte>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableSet<Byte>> = object : KSerializer<MutableSet<Byte>> {
            private val delegate = SetSerializer(Byte.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableSet<Byte> {
                return delegate.deserialize(decoder).toMutableSet().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableSet<Byte>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableLongSet")
internal fun Setting.valueImpl(
    default: MutableSet<Long>
): MutableLongSetValue {
    var internalValue: MutableSet<Long> = default

    val delegt = dynamicMutableSet { internalValue }
    return object : MutableLongSetValue(), MutableSet<Long> by delegt {
        override var value: MutableSet<Long>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableSet<Long>> = object : KSerializer<MutableSet<Long>> {
            private val delegate = SetSerializer(Long.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableSet<Long> {
                return delegate.deserialize(decoder).toMutableSet().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableSet<Long>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableFloatSet")
internal fun Setting.valueImpl(
    default: MutableSet<Float>
): MutableFloatSetValue {
    var internalValue: MutableSet<Float> = default

    val delegt = dynamicMutableSet { internalValue }
    return object : MutableFloatSetValue(), MutableSet<Float> by delegt {
        override var value: MutableSet<Float>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableSet<Float>> = object : KSerializer<MutableSet<Float>> {
            private val delegate = SetSerializer(Float.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableSet<Float> {
                return delegate.deserialize(decoder).toMutableSet().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableSet<Float>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableDoubleSet")
internal fun Setting.valueImpl(
    default: MutableSet<Double>
): MutableDoubleSetValue {
    var internalValue: MutableSet<Double> = default

    val delegt = dynamicMutableSet { internalValue }
    return object : MutableDoubleSetValue(), MutableSet<Double> by delegt {
        override var value: MutableSet<Double>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableSet<Double>> = object : KSerializer<MutableSet<Double>> {
            private val delegate = SetSerializer(Double.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableSet<Double> {
                return delegate.deserialize(decoder).toMutableSet().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableSet<Double>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableBooleanSet")
internal fun Setting.valueImpl(
    default: MutableSet<Boolean>
): MutableBooleanSetValue {
    var internalValue: MutableSet<Boolean> = default

    val delegt = dynamicMutableSet { internalValue }
    return object : MutableBooleanSetValue(), MutableSet<Boolean> by delegt {
        override var value: MutableSet<Boolean>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableSet<Boolean>> = object : KSerializer<MutableSet<Boolean>> {
            private val delegate = SetSerializer(Boolean.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableSet<Boolean> {
                return delegate.deserialize(decoder).toMutableSet().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableSet<Boolean>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableCharSet")
internal fun Setting.valueImpl(
    default: MutableSet<Char>
): MutableCharSetValue {
    var internalValue: MutableSet<Char> = default

    val delegt = dynamicMutableSet { internalValue }
    return object : MutableCharSetValue(), MutableSet<Char> by delegt {
        override var value: MutableSet<Char>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableSet<Char>> = object : KSerializer<MutableSet<Char>> {
            private val delegate = SetSerializer(Char.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableSet<Char> {
                return delegate.deserialize(decoder).toMutableSet().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableSet<Char>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}

@JvmName("valueImplMutableStringSet")
internal fun Setting.valueImpl(
    default: MutableSet<String>
): MutableStringSetValue {
    var internalValue: MutableSet<String> = default

    val delegt = dynamicMutableSet { internalValue }
    return object : MutableStringSetValue(), MutableSet<String> by delegt {
        override var value: MutableSet<String>
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }

        private val outerThis get() = this

        override val serializer: KSerializer<MutableSet<String>> = object : KSerializer<MutableSet<String>> {
            private val delegate = SetSerializer(String.serializer())
            override val descriptor: SerialDescriptor = delegate.descriptor

            override fun deserialize(decoder: Decoder): MutableSet<String> {
                return delegate.deserialize(decoder).toMutableSet().observable {
                    onElementChanged(outerThis)
                }
            }

            override fun serialize(encoder: Encoder, value: MutableSet<String>) {
                delegate.serialize(encoder, value)
            }
        }
    }
}


internal fun <T : Setting> Setting.valueImpl(default: T): Value<T> {
    return object : SettingValue<T>() {
        private var internalValue: T = default
        override var value: T
            get() = internalValue
            set(new) {
                if (new != internalValue) {
                    internalValue = new
                    onElementChanged(this)
                }
            }
        override val serializer = object : KSerializer<T> {
            override val descriptor: SerialDescriptor
                get() = internalValue.updaterSerializer.descriptor

            override fun deserialize(decoder: Decoder): T {
                internalValue.updaterSerializer.deserialize(decoder)
                return internalValue
            }

            override fun serialize(encoder: Encoder, value: T) {
                internalValue.updaterSerializer.serialize(encoder, SettingSerializerMark)
            }
        }
    }
}

